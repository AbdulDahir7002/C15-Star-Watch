name: PyTest & Deploy Workflow

on:
  push:
    branches:
      - main
      - abdul-ec2-deploy
  workflow_dispatch:

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pytest
        run: |
          pytest
  deploy:
    runs-on: ubuntu-latest
    needs: ["test"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploy to Server
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          ARGS: "-rlgoDzvc --delete --exclude 'dashboard/logs/dashboard.log' -i"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          SOURCE: "dashboard"
      
      - name: Deploy to hourly ECR
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region eu-west-2
          export HOURLY_ECR_NAME=${{ secrets.HOURLY_ECR_NAME }}
          export HOURLY_LAMBDA_NAME=${{ secrets.HOURLY_LAMBDA_NAME }}
          export DAILY_ECR_NAME=${{ secrets.DAILY_ECR_NAME }}
          export DAILY_LAMBDA_NAME=${{ secrets.DAILY_LAMBDA_NAME }}
          export WEEKLY_ECR_NAME=${{ secrets.WEEKLY_ECR_NAME }}
          export WEEKLY_LAMBDA_NAME=${{ secrets.WEEKLY_LAMBDA_NAME }}
          cd hourly_pipeline/hourly_etl_scripts
          bash push_image.sh
          cd ../../daily_pipeline
          bash push_image.sh
          cd ../weekly-report
          bash push_image.sh

      - name: Create pemkey
        env:
          PEMKEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$PEMKEY" >> keyfile
          chmod 400 keyfile
      - name: Stop previous
        run: |
          ssh -tt -i keyfile ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} <<EOF
          if [ ! -z $(pgrep -f "streamlit run")]; then
            pkill -f "streamlit run" 
          else
            echo "No process"
          fi
          exit
          EOF
      - name: Start new
        run: |
          ssh -i keyfile ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} <<EOF
          nohup streamlit run dashboard/main.py &
          exit
          EOF
